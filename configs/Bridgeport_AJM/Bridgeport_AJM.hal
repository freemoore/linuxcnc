# Generated by PNCconf at Fri May 12 19:47:26 2023
# Using LinuxCNC version:  2.8
# If you make changes to this file, they will be
# overwritten when you run PNCconf again

loadrt [KINS]KINEMATICS
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS
loadrt hostmot2
loadrt hm2_pci config="firmware=hm2/5i23/5i23_fmd.bit num_encoders=14 num_pwmgens=7 num_stepgens=2 sserial_port_0=00xxxxxx" 
#loadrt hm2_pci config="firmware=hm2/5i23/5i23_7i48_7i52.BIT num_encoders=6 num_pwmgens=5 num_stepgens=0 sserial_port_0=00xxxxxx" 
setp    [HMOT](CARD0).pwmgen.pwm_frequency 24000
setp    [HMOT](CARD0).pwmgen.pdm_frequency 6000
setp    [HMOT](CARD0).watchdog.timeout_ns 10000000
loadrt pid names=pid.x,pid.y,pid.z,pid.s
loadrt abs names=abs.spindle
loadrt lowpass names=lowpass.spindle
loadrt scale names=scale.spindle,scale.0,scale.1,scale.2,scale.3
loadrt near names=spindle-at-speed

addf spindle-at-speed servo-thread
setp spindle-at-speed.scale 0.5
setp spindle-at-speed.difference 250

addf [HMOT](CARD0).read          servo-thread
addf motion-command-handler   servo-thread
addf motion-controller        servo-thread
addf pid.x.do-pid-calcs       servo-thread
addf pid.y.do-pid-calcs       servo-thread
addf pid.z.do-pid-calcs       servo-thread
addf pid.s.do-pid-calcs       servo-thread
addf scale.spindle            servo-thread
addf scale.0                  servo-thread
addf scale.1                  servo-thread
addf scale.2                  servo-thread
addf scale.3                  servo-thread
addf abs.spindle              servo-thread
addf lowpass.spindle          servo-thread
addf [HMOT](CARD0).write         servo-thread

# external output signals


# --- FORCE-PIN-TRUE ---
setp [HMOT](CARD0).7i84.0.0.output-00 true

# --- COOLANT-FLOOD ---
net coolant-flood  =>     [HMOT](CARD0).7i84.0.0.output-01

# --- FORCE-PIN-TRUE ---
setp [HMOT](CARD0).7i84.0.0.output-02 true

# --- COOLANT-MIST ---
net coolant-mist  =>     [HMOT](CARD0).7i84.0.0.output-03

# --- SPINDLE-BRAKE ---
#net spindle-brake  =>     [HMOT](CARD0).7i84.0.0.output-05 [HMOT](CARD0).7i84.0.0.output-15

setp [HMOT](CARD0).7i84.0.0.output-05-invert true
net spindle-brake  =>     [HMOT](CARD0).7i84.0.0.output-05 [HMOT](CARD0).7i84.0.0.output-15

# --- SPINDLE-CW ---
net spindle-cw  =>     [HMOT](CARD0).7i84.0.0.output-08 [HMOT](CARD0).7i84.0.0.output-12
#net spindle-cw  =>      [HMOT](CARD0).7i84.0.0.output-11
# --- SPINDLE-CCW ---

net spindle-ccw  =>     [HMOT](CARD0).7i84.0.0.output-09 [HMOT](CARD0).7i84.0.0.output-13
#net spindle-ccw  =>     [HMOT](CARD0).7i84.0.0.output-12

# --- SPINDLE-RESET ---
#net spindle-rst  =>     [HMOT](CARD0).7i84.0.0.output-10 [HMOT](CARD0).7i84.0.0.output-14
net spindle-rst  =>     [HMOT](CARD0).7i84.0.0.output-10

# --- SPINDLE-ENABLE ---
net spindle-enable 		[HMOT](CARD0).7i84.0.0.output-14


# external input signals 

# --- HOME-X ---
net home-x     <=  [HMOT](CARD0).7i84.0.0.input-00

# --- HOME-Y ---
net home-y     <=  [HMOT](CARD0).7i84.0.0.input-01

# --- HOME-Z ---
net home-z     <=  [HMOT](CARD0).7i84.0.0.input-02

# --- ALL-LIMIT ---
net all-limit     <=  [HMOT](CARD0).7i84.0.0.input-03-not

# --- ESTOP-EXT ---
net estop-ext     <=  [HMOT](CARD0).7i84.0.0.input-04

# --- PROBE-IN ---
net probe-in     <=  [HMOT](CARD0).7i84.0.0.input-05-not




#*******************
#  AXIS X JOINT 0
#*******************

setp   pid.x.Pgain     [JOINT_0]P
setp   pid.x.Igain     [JOINT_0]I
setp   pid.x.Dgain     [JOINT_0]D
setp   pid.x.bias      [JOINT_0]BIAS
setp   pid.x.FF0       [JOINT_0]FF0
setp   pid.x.FF1       [JOINT_0]FF1
setp   pid.x.FF2       [JOINT_0]FF2
setp   pid.x.deadband  [JOINT_0]DEADBAND
setp   pid.x.maxoutput [JOINT_0]MAX_OUTPUT
setp   pid.x.error-previous-target true

net x-index-enable  =>  pid.x.index-enable
net x-enable        =>  pid.x.enable
net x-pos-cmd       =>  pid.x.command
net x-pos-fb        =>  pid.x.feedback
net x-output        <=  pid.x.output

# ---PWM Generator signals/setup---

setp   [HMOT](CARD0).pwmgen.00.output-type 2
setp   [HMOT](CARD0).pwmgen.00.scale  [JOINT_0]OUTPUT_SCALE

net x-output                             => [HMOT](CARD0).pwmgen.00.value
net x-pos-cmd    joint.0.motor-pos-cmd
net x-enable     joint.0.amp-enable-out  => [HMOT](CARD0).pwmgen.00.enable

# ---Encoder feedback signals/setup---

setp    [HMOT](CARD0).encoder.00.counter-mode 0
setp    [HMOT](CARD0).encoder.00.filter 1
setp    [HMOT](CARD0).encoder.00.index-invert 0
setp    [HMOT](CARD0).encoder.00.index-mask 0
setp    [HMOT](CARD0).encoder.00.index-mask-invert 0
setp    [HMOT](CARD0).encoder.00.scale  [JOINT_0]ENCODER_SCALE

net x-pos-fb               <=  [HMOT](CARD0).encoder.00.position
net x-vel-fb               <=  [HMOT](CARD0).encoder.00.velocity
net x-pos-fb               =>  joint.0.motor-pos-fb
net x-index-enable    joint.0.index-enable  <=>  [HMOT](CARD0).encoder.00.index-enable
net x-pos-rawcounts        <=  [HMOT](CARD0).encoder.00.rawcounts

# ---setup home / limit switch signals---

net home-x     =>  joint.0.home-sw-in
net all-limit     =>  joint.0.neg-lim-sw-in
net all-limit     =>  joint.0.pos-lim-sw-in

#*******************
#  AXIS Y JOINT 1
#*******************

setp   pid.y.Pgain     [JOINT_1]P
setp   pid.y.Igain     [JOINT_1]I
setp   pid.y.Dgain     [JOINT_1]D
setp   pid.y.bias      [JOINT_1]BIAS
setp   pid.y.FF0       [JOINT_1]FF0
setp   pid.y.FF1       [JOINT_1]FF1
setp   pid.y.FF2       [JOINT_1]FF2
setp   pid.y.deadband  [JOINT_1]DEADBAND
setp   pid.y.maxoutput [JOINT_1]MAX_OUTPUT
setp   pid.y.error-previous-target true

net y-index-enable  =>  pid.y.index-enable
net y-enable        =>  pid.y.enable
net y-pos-cmd       =>  pid.y.command
net y-pos-fb        =>  pid.y.feedback
net y-output        <=  pid.y.output

# ---PWM Generator signals/setup---

setp   [HMOT](CARD0).pwmgen.01.output-type 2
setp   [HMOT](CARD0).pwmgen.01.scale  [JOINT_1]OUTPUT_SCALE

net y-output                             => [HMOT](CARD0).pwmgen.01.value
net y-pos-cmd    joint.1.motor-pos-cmd
net y-enable     joint.1.amp-enable-out  => [HMOT](CARD0).pwmgen.01.enable

# ---Encoder feedback signals/setup---

setp    [HMOT](CARD0).encoder.01.counter-mode 0
setp    [HMOT](CARD0).encoder.01.filter 1
setp    [HMOT](CARD0).encoder.01.index-invert 0
setp    [HMOT](CARD0).encoder.01.index-mask 0
setp    [HMOT](CARD0).encoder.01.index-mask-invert 0
setp    [HMOT](CARD0).encoder.01.scale  [JOINT_1]ENCODER_SCALE

net y-pos-fb               <=  [HMOT](CARD0).encoder.01.position
net y-vel-fb               <=  [HMOT](CARD0).encoder.01.velocity
net y-pos-fb               =>  joint.1.motor-pos-fb
net y-index-enable    joint.1.index-enable  <=>  [HMOT](CARD0).encoder.01.index-enable
net y-pos-rawcounts        <=  [HMOT](CARD0).encoder.01.rawcounts

# ---setup home / limit switch signals---

net home-y     =>  joint.1.home-sw-in
net all-limit     =>  joint.1.neg-lim-sw-in
net all-limit     =>  joint.1.pos-lim-sw-in

#*******************
#  AXIS Z JOINT 2
#*******************

setp   pid.z.Pgain     [JOINT_2]P
setp   pid.z.Igain     [JOINT_2]I
setp   pid.z.Dgain     [JOINT_2]D
setp   pid.z.bias      [JOINT_2]BIAS
setp   pid.z.FF0       [JOINT_2]FF0
setp   pid.z.FF1       [JOINT_2]FF1
setp   pid.z.FF2       [JOINT_2]FF2
setp   pid.z.deadband  [JOINT_2]DEADBAND
setp   pid.z.maxoutput [JOINT_2]MAX_OUTPUT
setp   pid.z.error-previous-target true

net z-index-enable  =>  pid.z.index-enable
net z-enable        =>  pid.z.enable
net z-pos-cmd       =>  pid.z.command
net z-pos-fb        =>  pid.z.feedback
net z-output        <=  pid.z.output

# ---PWM Generator signals/setup---

setp   [HMOT](CARD0).pwmgen.02.output-type 2
setp   [HMOT](CARD0).pwmgen.02.scale  [JOINT_2]OUTPUT_SCALE

net z-output                             => [HMOT](CARD0).pwmgen.02.value
net z-pos-cmd    joint.2.motor-pos-cmd
net z-enable     joint.2.amp-enable-out  => [HMOT](CARD0).pwmgen.02.enable

# ---Encoder feedback signals/setup---

setp    [HMOT](CARD0).encoder.02.counter-mode 0
setp    [HMOT](CARD0).encoder.02.filter 1
setp    [HMOT](CARD0).encoder.02.index-invert 0
setp    [HMOT](CARD0).encoder.02.index-mask 0
setp    [HMOT](CARD0).encoder.02.index-mask-invert 0
setp    [HMOT](CARD0).encoder.02.scale  [JOINT_2]ENCODER_SCALE

net z-pos-fb               <=  [HMOT](CARD0).encoder.02.position
net z-vel-fb               <=  [HMOT](CARD0).encoder.02.velocity
net z-pos-fb               =>  joint.2.motor-pos-fb
net z-index-enable    joint.2.index-enable  <=>  [HMOT](CARD0).encoder.02.index-enable
net z-pos-rawcounts        <=  [HMOT](CARD0).encoder.02.rawcounts

# ---setup home / limit switch signals---

net home-z     =>  joint.2.home-sw-in
net all-limit     =>  joint.2.neg-lim-sw-in
net all-limit     =>  joint.2.pos-lim-sw-in

#*******************
#  SPINDLE
#*******************

setp   pid.s.Pgain     [SPINDLE_0]P
setp   pid.s.Igain     [SPINDLE_0]I
setp   pid.s.Dgain     [SPINDLE_0]D
setp   pid.s.bias      [SPINDLE_0]BIAS
setp   pid.s.FF0       [SPINDLE_0]FF0
setp   pid.s.FF1       [SPINDLE_0]FF1
setp   pid.s.FF2       [SPINDLE_0]FF2
setp   pid.s.deadband  [SPINDLE_0]DEADBAND
setp   pid.s.maxoutput [SPINDLE_0]MAX_OUTPUT
setp   pid.s.error-previous-target true

net spindle-index-enable  =>  pid.s.index-enable
net spindle-enable        =>  pid.s.enable
net spindle-vel-cmd-rpm-abs     => pid.s.command
net spindle-vel-fb-rpm-abs      => pid.s.feedback
net spindle-output        <=  pid.s.output

# ---PWM Generator signals/setup---

setp   [HMOT](CARD0).pwmgen.03.output-type 2
setp   [HMOT](CARD0).pwmgen.03.scale  [SPINDLE_0]OUTPUT_SCALE

# andy trying out pwmgen spindle control via 7i52
#setp   [HMOT](CARD0).pwmgen.06.output-type 1
#setp   [HMOT](CARD0).pwmgen.06.scale  [SPINDLE_0]OUTPUT_SCALE
# note - this worked giving pwm out on the last com position on the 7i52 card. servo drive doesn't accept pwm in so not used for now. 

#net spindle-output      => [HMOT](CARD0).pwmgen.03.value [HMOT](CARD0).pwmgen.06.value
#net spindle-enable      => [HMOT](CARD0).pwmgen.03.enable [HMOT](CARD0).pwmgen.06.enable

net spindle-output      => [HMOT](CARD0).pwmgen.03.value
net spindle-enable      => [HMOT](CARD0).pwmgen.03.enable

# ---Encoder feedback signals/setup---

setp    [HMOT](CARD0).encoder.03.counter-mode 0
setp    [HMOT](CARD0).encoder.03.filter 1
setp    [HMOT](CARD0).encoder.03.index-invert 0
setp    [HMOT](CARD0).encoder.03.index-mask 0
setp    [HMOT](CARD0).encoder.03.index-mask-invert 0
setp    [HMOT](CARD0).encoder.03.scale  [SPINDLE_0]ENCODER_SCALE

net spindle-revs             <=   [HMOT](CARD0).encoder.03.position
net spindle-vel-fb-rps       <=   [HMOT](CARD0).encoder.03.velocity
net spindle-vel-fb-rpm       <=   [HMOT](CARD0).encoder.03.velocity-rpm
net spindle-index-enable     <=>  [HMOT](CARD0).encoder.03.index-enable

# ---setup spindle control signals---

net spindle-vel-cmd-rps        <=  spindle.0.speed-out-rps
net spindle-vel-cmd-rps-abs    <=  spindle.0.speed-out-rps-abs
net spindle-vel-cmd-rpm        <=  spindle.0.speed-out
net spindle-vel-cmd-rpm-abs    <=  spindle.0.speed-out-abs
net spindle-enable             <=  spindle.0.on
net spindle-cw                 <=  spindle.0.forward
net spindle-ccw                <=  spindle.0.reverse
net spindle-brake              <=  spindle.0.brake
net spindle-revs               =>  spindle.0.revs
net spindle-vel-fb-rps         =>  spindle.0.speed-in
net spindle-index-enable      <=>  spindle.0.index-enable
net vfd-has-faulted		   =>  spindle.0.amp-fault-in


#  Use ACTUAL spindle velocity from spindle encoder
#  spindle-velocity bounces around so we filter it with lowpass
#  spindle-velocity is signed so we use absolute component to remove sign
#  ACTUAL velocity is in RPS not RPM so we scale it.

# changing this per PCW recommendation on a pid tuning thread:

setp     lowpass.spindle.gain 1.000000
net spindle-vel-fb-rpm => abs.spindle.in
net spindle-vel-fb-rpm-abs abs.spindle.out => lowpass.spindle.in
net spindle-fb-rpm-abs-filtered  lowpass.spindle.out  

# ---Setup spindle at speed signals---

net spindle-fb-rpm-abs-filtered spindle-at-speed.in1
net spindle-vel-cmd-rpm spindle-at-speed.in2
net spindle-ready <= spindle-at-speed.out => spindle.0.at-speed



#******************************
# connect miscellaneous signals
#******************************

#  ---HALUI signals---


net x-is-homed     halui.joint.0.is-homed
net y-is-homed     halui.joint.1.is-homed
net z-is-homed     halui.joint.2.is-homed

net spindle-manual-cw     halui.spindle.0.forward
net spindle-manual-ccw    halui.spindle.0.reverse
net spindle-manual-stop   halui.spindle.0.stop

net machine-is-on         halui.machine.is-on
net jog-speed             halui.axis.jog-speed
net MDI-mode              halui.mode.is-mdi

#  ---coolant signals---

net coolant-mist      <=  iocontrol.0.coolant-mist
net coolant-flood     <=  iocontrol.0.coolant-flood

#  ---probe signal---

net probe-in     =>  motion.probe-input

# ---jog button signals---

sets    jog-speed 1.000000

#  ---motion control signals---

net in-position               <=  motion.in-position
net machine-is-enabled        <=  motion.motion-enabled

#  ---digital in / out signals---

#  ---estop signals---

net estop-out     <=  iocontrol.0.user-enable-out
net estop-ext     =>  iocontrol.0.emc-enable-in

#  ---manual tool change signals---

#net tool-change-request    <= iocontrol.0.tool-change
#net tool-change-confirmed  => iocontrol.0.tool-changed
#net tool-number            <= iocontrol.0.tool-prep-number

#  ---Use external manual tool change dialog---

#loadusr -W hal_manualtoolchange
#net tool-change-request    =>  hal_manualtoolchange.change
#net tool-change-confirmed  <=  hal_manualtoolchange.changed
#net tool-number            =>  hal_manualtoolchange.number

#  ---ignore tool prepare requests---
#net tool-prepare-loopback   iocontrol.0.tool-prepare      =>  iocontrol.0.tool-prepared

