
root_window.tk.call("wm","resizable",".",1,1)
root_window.tk.call("wm","geometry",".","1920x1080")
#root_window.attributes("-fullscreen",1)

root_window.tk.call('.pane.top.tabs','configure','-width',20)
root_window.tk.call('.pane.top.feedoverride','configure','-width',20)
root_window.tk.call('.pane.top.rapidoverride','configure','-width',20)
root_window.tk.call('.pane.top.spinoverride','configure','-width',20)
root_window.tk.call('.pane.top.jogspeed.l0','configure','-text','Jog V')
#root_window.tk.call('.pane.top.ajogspeed.l0','configure','-text','Jog A')
root_window.tk.call('.pane.top.maxvel.l0','configure','-text','Max V')


root_window.tk.call("wm","protocol",".","WM_DELETE_WINDOW","destroy .")

root_window.tk.call("source","bigfileopen.tcl")

# Customize tab titles
root_window.tk.call('.pane.top.tabs','itemconfigure','manual','-text','Manual control')
root_window.tk.call('.pane.top.tabs','itemconfigure','mdi','-text','Manual G-code')
# Show remaining time in LinuxCNC Axis status bar
# Place this code in your axis_usercommands.py
class RemainingTime:
    prev_update = 0         # Previous time user_live_update() was called
    prev_calculate = None   # Hash of preview gcode state, to avoid unnecessary recalculations
    prev_line = 0           # Previous executed G-code line
    total_feed = 0          # Total feed time (seconds) in program at normal speed
    total_traverse = 0      # Total traverse time (seconds) in program at normal speed
    total_dwell = 0         # Total dwell time in program
    done_feed = 0           # Feed time (seconds) done so far at normal speed
    done_traverse = 0       # Traverse time (seconds) done so far at normal speed
    done_dwell = 0          # Total dwell time done so far
    first_traverse = 0      # Ignore first traverse to the G-code start position
    def __init__(self):
        self.info = nf.makewidget(root_window, Frame, '.info')
        tool_label = nf.makewidget(root_window, Label, '.info.tool')
        tool_label.pack_forget()
        self.label = Tkinter.Label(self.info, text="Foobar", anchor="w", borderwidth=2, relief="sunken", width=30)
        self.label.pack(fill="x", side="left", expand=1)
        tool_label.pack(side="left")
    def update_total_time(self):
        '''Calculate total time for G-code based on loaded preview'''
        # Check if anything has changed
        maxvel = live_plotter.stat.max_velocity
        canon = o.canon
        key = hash((id(canon), maxvel))
        if key == self.prev_calculate: return
        self.prev_calculate = key
        self.total_traverse = sum(dist(l[1][:3], l[2][:3]) / maxvel for l in canon.traverse)
        self.total_feed = (sum(dist(l[1][:3], l[2][:3]) / min(maxvel, l[3]) for l in canon.feed) +
                           sum(dist(l[1][:3], l[2][:3]) / min(maxvel, l[3]) for l in canon.arcfeed))
        self.total_dwell = canon.dwell_time
    def format_time(self, seconds):
        if seconds > 120:
            return '%.0f min' % (seconds / 60.0)
        else:
            return '%.0f sec' % seconds
    def update(self):
        t = time.time()
        delta = t - self.prev_update
        self.prev_update = t
        self.update_total_time()
        stat = live_plotter.stat
        if stat.task_mode == linuxcnc.MODE_AUTO:
            # Count the time spent feeding / traversing
            if stat.paused:
                pass
            elif stat.motion_type == linuxcnc.MOTION_TYPE_TRAVERSE:
                if self.first_traverse is None or self.first_traverse == stat.id:
                    self.first_traverse = stat.id
                    pass # Ignore the traverse to G-code start position
                else:
                    self.done_traverse += delta * stat.rapidrate
            elif stat.motion_type != 0:
                self.first_traverse = -1
                self.done_feed += delta * stat.feedrate
            elif stat.delay_left > 0:
                self.done_dwell += delta
            progress_percent = 100 * ((self.done_traverse + self.done_feed + self.done_dwell) /
                                      (self.total_traverse + self.total_feed + self.total_dwell))
            try:
                remain = ((self.total_traverse - self.done_traverse) / stat.rapidrate
                        + (self.total_feed - self.done_feed) / stat.feedrate
                        + (self.total_dwell - self.done_dwell))
            except ZeroDivisionError:
                remain = float("inf")
            self.label['text'] = 'Progress: %0.1f %% (remaining %s)' % (progress_percent, self.format_time(remain))
        else:
            # In manual mode
            self.done_traverse = self.done_feed = self.done_dwell = 0
            self.first_traverse = None
            try:
                remain = (self.total_traverse / stat.rapidrate + self.total_feed / stat.feedrate + self.total_dwell)
            except ZeroDivisionError:
                remain = self.total_traverse + self.total_feed
            self.label['text'] = 'Estimated run time %s' % (self.format_time(remain),)
remainingtime = RemainingTime()
def user_live_update():
    remainingtime.update()
    
# Copyright (c) 2020 Probe Screen NG Developers
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; If not, see <http://www.gnu.org/licenses/>.

# This AXIS RC file adds support for an error pin, mirroring the
# gmocappy.error pin's behaviour for AXIS.


def _remaining_error_count(widgets):
    """ Returns the count of remaining error messages """
    count = 0
    for i, item in enumerate(widgets):
        frame, icon, text, button, iname = item
        if iname == "icon_std_error":
            count += 1
    return count


def my_add(self, iconname, message):
    """ Signal to PSNG that an error has occurred. """
    self.original_add(iconname, message)

    if iconname == "error":
        probe_user_comp["error"] = True


def my_remove(self, widgets):
    """ Signal to PSNG when all errors have been cleared. """
    self.original_remove(widgets)

    if _remaining_error_count(self.widgets) == 0:
        probe_user_comp["error"] = False


# Rename the original add/remove method so we can retain the ability to call them
Notification.original_add = Notification.add
Notification.original_remove = Notification.remove

# Replace the add/remove methods with a wrapped version that manages an error pin
Notification.add = my_add
Notification.remove = my_remove

if hal_present == 1:
    # Add an probe.user.error pin
    probe_user_comp = hal.component("probe.user")
    probe_user_comp.newpin("error", hal.HAL_BIT, hal.HAL_OUT)
    probe_user_comp.ready()
